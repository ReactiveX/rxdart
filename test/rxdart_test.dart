library test.rx;

import 'observable/amb_test.dart' as amb_test;
import 'observable/combine_latest_test.dart' as combine_latest_test;
import 'observable/concat_eager_test.dart' as concat_eager_test;
import 'observable/concat_test.dart' as concat_test;
import 'observable/defer_test.dart' as defer_test;
import 'observable/event_transformed_test.dart' as event_transformed_test;
import 'observable/from_future_test.dart' as from_future_test;
import 'observable/from_iterable_test.dart' as from_iterable_test;
import 'observable/from_stream_test.dart' as from_stream_test;
import 'observable/just_test.dart' as just_test;
import 'observable/merge_test.dart' as merge_test;
import 'observable/periodic_test.dart' as periodic_test;
import 'observable/stream_test.dart' as stream_test;
import 'observable/tween_test.dart' as tween_test;
import 'observable/zip_test.dart' as zip_test;

import 'operators/any_test.dart' as any_test;
import 'operators/as_broadcast_stream.dart' as as_broadcast_stream;
import 'operators/async_expand_test.dart' as async_expand_test;
import 'operators/async_map_test.dart' as async_map_test;
import 'operators/buffer_with_count_test.dart' as buffer_with_count_test;
import 'operators/contains_test.dart' as contains_test;
import 'operators/debounce_test.dart' as debounce_test;
import 'operators/default_if_empty_test.dart' as default_if_empty_test;
import 'operators/distinct_test.dart' as distinct_test;
import 'operators/drain_test.dart' as drain_test;
import 'operators/element_at_test.dart' as element_at_test;
import 'operators/every_test.dart' as every_test;
import 'operators/expand_test.dart' as expand_test;
import 'operators/first_test.dart' as first_test;
import 'operators/first_where_test.dart' as first_where_test;
import 'operators/flat_map_latest_test.dart' as flat_map_latest_test;
import 'operators/flat_map_test.dart' as flat_map_test;
import 'operators/fold_test.dart' as fold_test;
import 'operators/for_each_test.dart' as for_each_test;
import 'operators/group_by_test.dart' as group_by_test;
import 'operators/handle_error_test.dart' as handle_error_test;
import 'operators/interval_test.dart' as interval_test;
import 'operators/is_empty_test.dart' as is_empty_test;
import 'operators/join_test.dart' as join_test;
import 'operators/last_test.dart' as last_test;
import 'operators/last_where_test.dart' as last_where_test;
import 'operators/max_test.dart' as max_test;
import 'operators/min_test.dart' as min_test;
import 'operators/of_type_test.dart' as of_type_test;
import 'operators/pluck_test.dart' as pluck_test;
import 'operators/reduce_test.dart' as reduce_test;
import 'operators/repeat_test.dart' as repeat_test;
import 'operators/retry_test.dart' as retry_test;
import 'operators/sample_test.dart' as sample_test;
import 'operators/scan_test.dart' as scan_test;
import 'operators/single_test.dart' as single_test;
import 'operators/single_where_test.dart' as single_where_test;
import 'operators/skip_test.dart' as skip_test;
import 'operators/skip_while_test.dart' as skip_while_test;
import 'operators/start_with_many_test.dart' as start_with_many_test;
import 'operators/start_with_test.dart' as start_with_test;
import 'operators/take_until_test.dart' as take_until_test;
import 'operators/take_while_test.dart' as take_while_test;
import 'operators/tap_test.dart' as tap_test;
import 'operators/throttle_test.dart' as throttle_test;
import 'operators/time_interval_test.dart' as time_interval_test;
import 'operators/timeout_test.dart' as timeout_test;
import 'operators/to_list_test.dart' as to_list_test;
import 'operators/to_set_test.dart' as to_set_test;
import 'operators/transform_test.dart' as transform_test;
import 'operators/where_test.dart' as where_test;
import 'operators/window_with_count_test.dart' as window_with_count_test;
import 'operators/with_latest_from_test.dart' as with_latest_from_test;

import 'subject/replay_subject_test.dart' as replay_subject_test;
import 'subject/behaviour_subject_test.dart' as behaviour_subject_test;

void main() {
  amb_test.main();
  combine_latest_test.main();
  concat_eager_test.main();
  concat_test.main();
  defer_test.main();
  event_transformed_test.main();
  from_future_test.main();
  from_iterable_test.main();
  from_stream_test.main();
  just_test.main();
  merge_test.main();
  periodic_test.main();
  stream_test.main();
  zip_test.main();

  any_test.main();
  as_broadcast_stream.main();
  as_broadcast_stream.main();
  async_expand_test.main();
  async_map_test.main();
  buffer_with_count_test.main();
  contains_test.main();
  debounce_test.main();
  default_if_empty_test.main();
  distinct_test.main();
  drain_test.main();
  element_at_test.main();
  every_test.main();
  expand_test.main();
  first_test.main();
  first_where_test.main();
  first_where_test.main();
  flat_map_latest_test.main();
  flat_map_test.main();
  fold_test.main();
  for_each_test.main();
  group_by_test.main();
  handle_error_test.main();
  interval_test.main();
  is_empty_test.main();
  join_test.main();
  last_test.main();
  last_where_test.main();
  max_test.main();
  min_test.main();
  of_type_test.main();
  pluck_test.main();
  reduce_test.main();
  repeat_test.main();
  retry_test.main();
  sample_test.main();
  scan_test.main();
  single_test.main();
  single_where_test.main();
  skip_test.main();
  skip_while_test.main();
  start_with_many_test.main();
  start_with_test.main();
  take_until_test.main();
  take_while_test.main();
  tap_test.main();
  throttle_test.main();
  time_interval_test.main();
  timeout_test.main();
  to_list_test.main();
  to_set_test.main();
  transform_test.main();
  tween_test.main();
  where_test.main();
  window_with_count_test.main();
  with_latest_from_test.main();

  behaviour_subject_test.main();
  replay_subject_test.main();
}
